#!/bin/bash
set -e

echo "=========================================="
echo "Updating Frontend Configuration for L2"
echo "=========================================="

# Check if L2 addresses exist
if [ ! -f "../gaia-config/l2-contract-addresses.json" ]; then
    echo "❌ Error: L2 contract addresses not found!"
    echo "Please deploy contracts first: ./gaia-scripts/deploy-gaia-contracts.sh"
    exit 1
fi

# Load L2 addresses
L2_ADDRESSES=$(cat ../gaia-config/l2-contract-addresses.json)

# Extract addresses
CUSD_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.cUSD')
TREASURY_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.Treasury')
TASK_REGISTRY_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.TaskRegistry')
FUNDING_POOL_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.FundingPool')
COLLATERAL_MANAGER_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.CollateralManager')
VERIFICATION_MANAGER_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.VerificationManager')
CARBON_CREDIT_MINTER_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.CarbonCreditMinter')
CARBON_MARKETPLACE_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.CarbonMarketplace')
PREDICTION_MARKETPLACE_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.PredictionMarketplace')
GOVERNANCE_DAO_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.GovernanceDAO')
DATA_REGISTRY_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.DataRegistry')
MODEL_REGISTRY_ADDRESS=$(echo $L2_ADDRESSES | jq -r '.ModelRegistry')

echo "Loaded L2 contract addresses"
echo ""

# Create L2 network configuration file
echo "Creating L2 network configuration..."

cat > ../client/lib/l2-config.ts << EOF
// Gaia L2 Network Configuration
// Auto-generated by update-frontend-config.sh

export const GAIA_L2_CONFIG = {
  chainId: 424242,
  chainName: "Gaia L2",
  rpcUrl: "http://localhost:8545",
  blockExplorer: "http://localhost:4000", // Optional: Set up Blockscout
  nativeCurrency: {
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
  },
};

// L2 Contract Addresses
export const L2_CONTRACT_ADDRESSES = {
  cUSD: "${CUSD_ADDRESS}",
  Treasury: "${TREASURY_ADDRESS}",
  TaskRegistry: "${TASK_REGISTRY_ADDRESS}",
  FundingPool: "${FUNDING_POOL_ADDRESS}",
  CollateralManager: "${COLLATERAL_MANAGER_ADDRESS}",
  VerificationManager: "${VERIFICATION_MANAGER_ADDRESS}",
  CarbonCreditMinter: "${CARBON_CREDIT_MINTER_ADDRESS}",
  CarbonMarketplace: "${CARBON_MARKETPLACE_ADDRESS}",
  PredictionMarketplace: "${PREDICTION_MARKETPLACE_ADDRESS}",
  GovernanceDAO: "${GOVERNANCE_DAO_ADDRESS}",
  DataRegistry: "${DATA_REGISTRY_ADDRESS}",
  ModelRegistry: "${MODEL_REGISTRY_ADDRESS}",
};

// Helper function to add L2 network to wallet
export async function addGaiaL2ToWallet() {
  if (typeof window.ethereum === "undefined") {
    throw new Error("MetaMask is not installed");
  }

  try {
    await window.ethereum.request({
      method: "wallet_addEthereumChain",
      params: [
        {
          chainId: \`0x\${GAIA_L2_CONFIG.chainId.toString(16)}\`,
          chainName: GAIA_L2_CONFIG.chainName,
          nativeCurrency: GAIA_L2_CONFIG.nativeCurrency,
          rpcUrls: [GAIA_L2_CONFIG.rpcUrl],
          blockExplorerUrls: GAIA_L2_CONFIG.blockExplorer
            ? [GAIA_L2_CONFIG.blockExplorer]
            : undefined,
        },
      ],
    });
    return true;
  } catch (error) {
    console.error("Failed to add Gaia L2 network:", error);
    return false;
  }
}

// Helper function to switch to L2 network
export async function switchToGaiaL2() {
  if (typeof window.ethereum === "undefined") {
    throw new Error("MetaMask is not installed");
  }

  try {
    await window.ethereum.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: \`0x\${GAIA_L2_CONFIG.chainId.toString(16)}\` }],
    });
    return true;
  } catch (error: any) {
    // Chain not added yet, try to add it
    if (error.code === 4902) {
      return await addGaiaL2ToWallet();
    }
    console.error("Failed to switch to Gaia L2 network:", error);
    return false;
  }
}
EOF

echo "✅ Created client/lib/l2-config.ts"
echo ""

# Create instructions file
cat > ../DEPLOY_TO_L2_INSTRUCTIONS.md << 'EOF'
# Deploying Gaia Protocol Frontend to L2

Your Gaia L2 rollup is now running! Here's how to connect your frontend:

## 1. L2 Network Details

- **Chain ID**: 424242
- **RPC URL**: http://localhost:8545
- **WebSocket URL**: ws://localhost:8546
- **Network Name**: Gaia L2

## 2. Add L2 to MetaMask

### Manual Method:
1. Open MetaMask
2. Click network dropdown
3. Click "Add Network"
4. Enter:
   - Network Name: `Gaia L2`
   - RPC URL: `http://localhost:8545`
   - Chain ID: `424242`
   - Currency Symbol: `ETH`

### Programmatic Method:
Use the helper function in `client/lib/l2-config.ts`:

```typescript
import { addGaiaL2ToWallet } from "@/lib/l2-config";

// In your component
await addGaiaL2ToWallet();
```

## 3. Update Wagmi Configuration

Update your `client/app/providers.tsx` or wagmi config file:

```typescript
import { GAIA_L2_CONFIG } from "@/lib/l2-config";

const gaiaL2 = {
  id: GAIA_L2_CONFIG.chainId,
  name: GAIA_L2_CONFIG.chainName,
  network: "gaia-l2",
  nativeCurrency: GAIA_L2_CONFIG.nativeCurrency,
  rpcUrls: {
    default: { http: [GAIA_L2_CONFIG.rpcUrl] },
    public: { http: [GAIA_L2_CONFIG.rpcUrl] },
  },
};

// Add to your chains array
const config = createConfig({
  chains: [gaiaL2, celoSepolia],
  // ... rest of config
});
```

## 4. Update Contract Hooks

All contract addresses are now in `client/lib/l2-config.ts`.

Update your hooks to use L2 addresses:

```typescript
import { L2_CONTRACT_ADDRESSES } from "@/lib/l2-config";

// Example: useTaskRegistry.ts
const CONTRACT_ADDRESS = L2_CONTRACT_ADDRESSES.TaskRegistry;
```

## 5. Get Test ETH on L2

Your accounts are pre-funded in the L2 genesis block:
- Admin: 10,000 ETH
- Batcher: 10,000 ETH
- Proposer: 10,000 ETH
- Sequencer: 10,000 ETH

To send ETH to other addresses:

```bash
cast send --rpc-url http://localhost:8545 \
  --private-key YOUR_PRIVATE_KEY \
  --value 10ether \
  RECIPIENT_ADDRESS
```

## 6. Bridge Assets from L1 to L2

To bridge assets from Celo Sepolia (L1) to Gaia L2:

### Using the Standard Bridge:

```typescript
// L1 -> L2 Deposit
const L1_STANDARD_BRIDGE = "YOUR_L1_BRIDGE_ADDRESS"; // From contract-addresses.json

// Approve tokens (if ERC20)
await tokenContract.approve(L1_STANDARD_BRIDGE, amount);

// Deposit to L2
await bridgeContract.depositERC20To(
  l1TokenAddress,
  l2TokenAddress,
  recipientAddress,
  amount,
  200000, // L2 gas
  "0x"
);
```

### Using the Optimism SDK:

```bash
npm install @eth-optimism/sdk
```

```typescript
import { CrossChainMessenger } from "@eth-optimism/sdk";

const messenger = new CrossChainMessenger({
  l1ChainId: 11142220, // Celo Sepolia
  l2ChainId: 424242,   // Gaia L2
  l1SignerOrProvider: l1Signer,
  l2SignerOrProvider: l2Signer,
});

// Deposit ETH
await messenger.depositETH(ethers.parseEther("1.0"));

// Deposit ERC20
await messenger.depositERC20(l1Token, l2Token, amount);
```

## 7. Start Development Server

```bash
cd client
npm run dev
```

Your frontend will now connect to Gaia L2!

## 8. Verify Deployment

Test that everything works:

```bash
# Check L2 block number
cast block-number --rpc-url http://localhost:8545

# Check contract code
cast code TASK_REGISTRY_ADDRESS --rpc-url http://localhost:8545

# Call a contract function
cast call TASK_REGISTRY_ADDRESS "totalTasks()(uint256)" --rpc-url http://localhost:8545
```

## 9. Production Deployment

For production:

1. **Use a public RPC endpoint** instead of localhost
2. **Set up a domain** for your L2 RPC
3. **Deploy a block explorer** (Blockscout)
4. **Set up monitoring** (Grafana + Prometheus)
5. **Configure HTTPS** for RPC endpoints
6. **Update CORS settings** in op-geth

## Troubleshooting

### MetaMask shows "Invalid Chain ID"
- Make sure L2 services are running
- Verify RPC URL is accessible
- Try adding network manually

### Transactions failing
- Check account has ETH on L2
- Verify contract addresses are correct
- Check gas settings

### Cannot connect to L2
- Ensure op-geth is running: `ps aux | grep geth`
- Check logs: `tail -f gaia-data/geth.log`
- Verify port 8545 is open

## Need Help?

- Check service status: `./gaia-scripts/check-status.sh`
- View logs: `tail -f gaia-data/*.log`
- Restart services: `./gaia-scripts/stop-all.sh && ./gaia-scripts/start-all.sh`
EOF

echo "✅ Created DEPLOY_TO_L2_INSTRUCTIONS.md"
echo ""

echo "=========================================="
echo "✅ Frontend Configuration Updated!"
echo "=========================================="
echo ""
echo "Files created:"
echo "  - client/lib/l2-config.ts"
echo "  - DEPLOY_TO_L2_INSTRUCTIONS.md"
echo ""
echo "Next steps:"
echo "1. Read DEPLOY_TO_L2_INSTRUCTIONS.md for detailed setup"
echo "2. Update your wagmi config to include Gaia L2"
echo "3. Update contract hooks to use L2_CONTRACT_ADDRESSES"
echo "4. Add Gaia L2 network to MetaMask"
echo "5. Start your frontend: cd client && npm run dev"
echo ""
